// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Atendimento {
  id            Int         @id @default(autoincrement())
  numero        String
  clienteNome   String?     
  atendenteId   Int?
  status        AtendimentoStatus @default(NOVO) // NOVO, EM_ATENDIMENTO, FINALIZADO
  canal         String       @default("whatsapp")
  dataInicio    DateTime     @default(now())
  dataFim       DateTime?
  mensagens     Mensagem[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([numero, status])
  @@index([atendenteId])
}

model Mensagem {
  id            Int       @id @default(autoincrement())
  atendimentoId Int
  remetente     Remetente // CLIENTE | ATENDENTE | ROBO
  tipo          TipoMensagem // TEXT | IMAGE | AUDIO | DOCUMENT | STICKER | LOCATION | CONTACT | UNKNOWN
  conteudo      String?
  midiaPath     String?
  mimeType      String?
  createdAt     DateTime  @default(now())
  atendimento   Atendimento @relation(fields: [atendimentoId], references: [id], onDelete: Cascade)

  @@index([atendimentoId, createdAt])
}

model OpcaoAtendimento {
  id            Int    @id @default(autoincrement())
  ordem         Int
  titulo        String
  atendenteId   Int
  ativo         Boolean @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([ordem, ativo])
}

model ConfiguracaoAtendimento {
  id             Int    @id @default(autoincrement())
  mensagemPadrao String
  // JSON com array de opções [{ordem:1, titulo:"Suporte", atendenteId:1}, ...]
  opcoes         Json
  ativo          Boolean @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// Novas tabelas para WhatsApp real
model WhatsAppSession {
  id        String   @id @default(cuid())
  name      String   @unique
  status    String   @default("disconnected") // disconnected, connecting, connected, qr_ready, error
  qrCode    String?  @db.Text
  lastError String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages WhatsAppMessage[]

  @@index([name])
  @@index([status])
}

model WhatsAppMessage {
  id          String   @id @default(cuid())
  sessionName String
  from        String
  to          String
  type        String   // TEXT, IMAGE, AUDIO, VIDEO, DOCUMENT, STICKER, LOCATION, CONTACT, UNKNOWN
  content     String?  @db.Text
  mediaPath   String?
  timestamp   DateTime @default(now())
  direction   String   @default("INBOUND") // INBOUND, OUTBOUND
  rawData     String?  @db.Text // JSON com dados completos da mensagem

  session WhatsAppSession @relation(fields: [sessionName], references: [name], onDelete: Cascade)

  @@index([sessionName])
  @@index([timestamp])
  @@index([from])
  @@index([to])
}

enum AtendimentoStatus {
  NOVO
  EM_ATENDIMENTO
  FINALIZADO
}

enum Remetente {
  CLIENTE
  ATENDENTE
  ROBO
}

enum TipoMensagem {
  TEXT
  IMAGE
  AUDIO
  DOCUMENT
  STICKER
  LOCATION
  CONTACT
  UNKNOWN
}
